int 'int'	 [StartOfLine]	Loc=<17_12_05.c:3:1>
identifier 'findMin'	 [LeadingSpace]	Loc=<17_12_05.c:3:5>
l_paren '('		Loc=<17_12_05.c:3:12>
int 'int'		Loc=<17_12_05.c:3:13>
star '*'	 [LeadingSpace]	Loc=<17_12_05.c:3:17>
identifier 'nums'		Loc=<17_12_05.c:3:18>
comma ','		Loc=<17_12_05.c:3:22>
int 'int'	 [LeadingSpace]	Loc=<17_12_05.c:3:24>
identifier 'numsSize'	 [LeadingSpace]	Loc=<17_12_05.c:3:28>
r_paren ')'		Loc=<17_12_05.c:3:36>
l_brace '{'	 [LeadingSpace]	Loc=<17_12_05.c:3:38>
int 'int'	 [StartOfLine] [LeadingSpace]	Loc=<17_12_05.c:4:5>
identifier 'l'	 [LeadingSpace]	Loc=<17_12_05.c:4:9>
equal '='	 [LeadingSpace]	Loc=<17_12_05.c:4:11>
numeric_constant '0'	 [LeadingSpace]	Loc=<17_12_05.c:4:13>
semi ';'		Loc=<17_12_05.c:4:14>
int 'int'	 [StartOfLine] [LeadingSpace]	Loc=<17_12_05.c:5:5>
identifier 'r'	 [LeadingSpace]	Loc=<17_12_05.c:5:9>
equal '='	 [LeadingSpace]	Loc=<17_12_05.c:5:11>
identifier 'numsSize'	 [LeadingSpace]	Loc=<17_12_05.c:5:13>
minus '-'	 [LeadingSpace]	Loc=<17_12_05.c:5:22>
numeric_constant '1'	 [LeadingSpace]	Loc=<17_12_05.c:5:24>
semi ';'		Loc=<17_12_05.c:5:25>
while 'while'	 [StartOfLine] [LeadingSpace]	Loc=<17_12_05.c:6:5>
l_paren '('	 [LeadingSpace]	Loc=<17_12_05.c:6:11>
identifier 'l'		Loc=<17_12_05.c:6:12>
less '<'	 [LeadingSpace]	Loc=<17_12_05.c:6:14>
identifier 'r'	 [LeadingSpace]	Loc=<17_12_05.c:6:16>
r_paren ')'		Loc=<17_12_05.c:6:17>
l_brace '{'	 [LeadingSpace]	Loc=<17_12_05.c:6:19>
int 'int'	 [StartOfLine] [LeadingSpace]	Loc=<17_12_05.c:7:9>
identifier 'm'	 [LeadingSpace]	Loc=<17_12_05.c:7:13>
equal '='	 [LeadingSpace]	Loc=<17_12_05.c:7:15>
identifier 'l'	 [LeadingSpace]	Loc=<17_12_05.c:7:17>
plus '+'	 [LeadingSpace]	Loc=<17_12_05.c:7:19>
l_paren '('	 [LeadingSpace]	Loc=<17_12_05.c:7:21>
identifier 'r'		Loc=<17_12_05.c:7:22>
minus '-'	 [LeadingSpace]	Loc=<17_12_05.c:7:24>
identifier 'l'	 [LeadingSpace]	Loc=<17_12_05.c:7:26>
r_paren ')'		Loc=<17_12_05.c:7:27>
slash '/'	 [LeadingSpace]	Loc=<17_12_05.c:7:29>
numeric_constant '2'	 [LeadingSpace]	Loc=<17_12_05.c:7:31>
semi ';'		Loc=<17_12_05.c:7:32>
if 'if'	 [StartOfLine] [LeadingSpace]	Loc=<17_12_05.c:8:9>
l_paren '('	 [LeadingSpace]	Loc=<17_12_05.c:8:12>
identifier '$$'		Loc=<17_12_05.c:8:13>
r_paren ')'		Loc=<17_12_05.c:8:15>
l_brace '{'	 [LeadingSpace]	Loc=<17_12_05.c:8:17>
identifier 'r'	 [StartOfLine] [LeadingSpace]	Loc=<17_12_05.c:9:13>
equal '='	 [LeadingSpace]	Loc=<17_12_05.c:9:15>
identifier 'm'	 [LeadingSpace]	Loc=<17_12_05.c:9:17>
semi ';'		Loc=<17_12_05.c:9:18>
r_brace '}'	 [StartOfLine] [LeadingSpace]	Loc=<17_12_05.c:10:9>
else 'else'	 [StartOfLine] [LeadingSpace]	Loc=<17_12_05.c:11:9>
if 'if'	 [LeadingSpace]	Loc=<17_12_05.c:11:14>
l_paren '('	 [LeadingSpace]	Loc=<17_12_05.c:11:17>
identifier 'nums'		Loc=<17_12_05.c:11:18>
l_square '['		Loc=<17_12_05.c:11:22>
identifier 'r'		Loc=<17_12_05.c:11:23>
r_square ']'		Loc=<17_12_05.c:11:24>
less '<'	 [LeadingSpace]	Loc=<17_12_05.c:11:26>
identifier 'nums'	 [LeadingSpace]	Loc=<17_12_05.c:11:28>
l_square '['		Loc=<17_12_05.c:11:32>
identifier 'm'		Loc=<17_12_05.c:11:33>
r_square ']'		Loc=<17_12_05.c:11:34>
r_paren ')'		Loc=<17_12_05.c:11:35>
l_brace '{'	 [LeadingSpace]	Loc=<17_12_05.c:11:37>
identifier 'l'	 [StartOfLine] [LeadingSpace]	Loc=<17_12_05.c:12:13>
equal '='	 [LeadingSpace]	Loc=<17_12_05.c:12:15>
identifier 'm'	 [LeadingSpace]	Loc=<17_12_05.c:12:17>
plus '+'	 [LeadingSpace]	Loc=<17_12_05.c:12:19>
numeric_constant '1'	 [LeadingSpace]	Loc=<17_12_05.c:12:21>
semi ';'		Loc=<17_12_05.c:12:22>
r_brace '}'	 [StartOfLine] [LeadingSpace]	Loc=<17_12_05.c:13:9>
else 'else'	 [StartOfLine] [LeadingSpace]	Loc=<17_12_05.c:14:9>
l_brace '{'	 [LeadingSpace]	Loc=<17_12_05.c:14:14>
identifier 'r'	 [StartOfLine] [LeadingSpace]	Loc=<17_12_05.c:15:13>
equal '='	 [LeadingSpace]	Loc=<17_12_05.c:15:15>
identifier 'm'	 [LeadingSpace]	Loc=<17_12_05.c:15:17>
semi ';'		Loc=<17_12_05.c:15:18>
r_brace '}'	 [StartOfLine] [LeadingSpace]	Loc=<17_12_05.c:16:9>
r_brace '}'	 [StartOfLine] [LeadingSpace]	Loc=<17_12_05.c:17:5>
return 'return'	 [StartOfLine] [LeadingSpace]	Loc=<17_12_05.c:18:5>
identifier 'nums'	 [LeadingSpace]	Loc=<17_12_05.c:18:12>
l_square '['		Loc=<17_12_05.c:18:16>
identifier 'l'		Loc=<17_12_05.c:18:17>
r_square ']'		Loc=<17_12_05.c:18:18>
semi ';'		Loc=<17_12_05.c:18:19>
r_brace '}'	 [StartOfLine]	Loc=<17_12_05.c:19:1>
int 'int'	 [StartOfLine]	Loc=<17_12_05.c:20:1>
identifier 'main'	 [LeadingSpace]	Loc=<17_12_05.c:20:5>
l_paren '('		Loc=<17_12_05.c:20:9>
r_paren ')'		Loc=<17_12_05.c:20:10>
l_brace '{'	 [LeadingSpace]	Loc=<17_12_05.c:20:12>
int 'int'	 [StartOfLine] [LeadingSpace]	Loc=<17_12_05.c:21:5>
identifier 'nums'	 [LeadingSpace]	Loc=<17_12_05.c:21:9>
l_square '['		Loc=<17_12_05.c:21:13>
r_square ']'		Loc=<17_12_05.c:21:14>
equal '='	 [LeadingSpace]	Loc=<17_12_05.c:21:16>
l_brace '{'	 [LeadingSpace]	Loc=<17_12_05.c:21:18>
numeric_constant '3'	 [LeadingSpace]	Loc=<17_12_05.c:21:20>
comma ','		Loc=<17_12_05.c:21:21>
numeric_constant '1'	 [LeadingSpace]	Loc=<17_12_05.c:21:23>
comma ','		Loc=<17_12_05.c:21:24>
numeric_constant '2'	 [LeadingSpace]	Loc=<17_12_05.c:21:26>
r_brace '}'	 [LeadingSpace]	Loc=<17_12_05.c:21:28>
semi ';'		Loc=<17_12_05.c:21:29>
l_paren '('	 [StartOfLine] [LeadingSpace]	Loc=<17_12_05.c:22:5 <Spelling=/usr/include/assert.h:108:3>>
l_paren '('		Loc=<17_12_05.c:22:5 <Spelling=/usr/include/assert.h:108:4>>
void 'void'		Loc=<17_12_05.c:22:5 <Spelling=/usr/include/assert.h:108:5>>
r_paren ')'		Loc=<17_12_05.c:22:5 <Spelling=/usr/include/assert.h:108:9>>
sizeof 'sizeof'	 [LeadingSpace]	Loc=<17_12_05.c:22:5 <Spelling=/usr/include/assert.h:108:11>>
l_paren '('	 [LeadingSpace]	Loc=<17_12_05.c:22:5 <Spelling=/usr/include/assert.h:108:18>>
l_paren '('		Loc=<17_12_05.c:22:5 <Spelling=/usr/include/assert.h:108:19>>
identifier 'findMin'		Loc=<17_12_05.c:22:5 <Spelling=17_12_05.c:22:12>>
l_paren '('		Loc=<17_12_05.c:22:5 <Spelling=17_12_05.c:22:19>>
identifier 'nums'		Loc=<17_12_05.c:22:5 <Spelling=17_12_05.c:22:20>>
comma ','		Loc=<17_12_05.c:22:5 <Spelling=17_12_05.c:22:24>>
sizeof 'sizeof'	 [LeadingSpace]	Loc=<17_12_05.c:22:5 <Spelling=17_12_05.c:22:26>>
l_paren '('		Loc=<17_12_05.c:22:5 <Spelling=17_12_05.c:22:32>>
identifier 'nums'		Loc=<17_12_05.c:22:5 <Spelling=17_12_05.c:22:33>>
r_paren ')'		Loc=<17_12_05.c:22:5 <Spelling=17_12_05.c:22:37>>
slash '/'	 [LeadingSpace]	Loc=<17_12_05.c:22:5 <Spelling=17_12_05.c:22:39>>
sizeof 'sizeof'	 [LeadingSpace]	Loc=<17_12_05.c:22:5 <Spelling=17_12_05.c:22:41>>
l_paren '('		Loc=<17_12_05.c:22:5 <Spelling=17_12_05.c:22:47>>
identifier 'nums'		Loc=<17_12_05.c:22:5 <Spelling=17_12_05.c:22:48>>
l_square '['		Loc=<17_12_05.c:22:5 <Spelling=17_12_05.c:22:52>>
numeric_constant '0'		Loc=<17_12_05.c:22:5 <Spelling=17_12_05.c:22:53>>
r_square ']'		Loc=<17_12_05.c:22:5 <Spelling=17_12_05.c:22:54>>
r_paren ')'		Loc=<17_12_05.c:22:5 <Spelling=17_12_05.c:22:55>>
r_paren ')'		Loc=<17_12_05.c:22:5 <Spelling=17_12_05.c:22:56>>
equalequal '=='	 [LeadingSpace]	Loc=<17_12_05.c:22:5 <Spelling=17_12_05.c:22:58>>
numeric_constant '1'	 [LeadingSpace]	Loc=<17_12_05.c:22:5 <Spelling=17_12_05.c:22:61>>
r_paren ')'		Loc=<17_12_05.c:22:5 <Spelling=/usr/include/assert.h:108:24>>
question '?'	 [LeadingSpace]	Loc=<17_12_05.c:22:5 <Spelling=/usr/include/assert.h:108:26>>
numeric_constant '1'	 [LeadingSpace]	Loc=<17_12_05.c:22:5 <Spelling=/usr/include/assert.h:108:28>>
colon ':'	 [LeadingSpace]	Loc=<17_12_05.c:22:5 <Spelling=/usr/include/assert.h:108:30>>
numeric_constant '0'	 [LeadingSpace]	Loc=<17_12_05.c:22:5 <Spelling=/usr/include/assert.h:108:32>>
r_paren ')'		Loc=<17_12_05.c:22:5 <Spelling=/usr/include/assert.h:108:33>>
comma ','		Loc=<17_12_05.c:22:5 <Spelling=/usr/include/assert.h:108:34>>
__extension__ '__extension__'	 [LeadingSpace]	Loc=<17_12_05.c:22:5 <Spelling=/usr/include/assert.h:108:36>>
l_paren '('	 [LeadingSpace]	Loc=<17_12_05.c:22:5 <Spelling=/usr/include/assert.h:108:50>>
l_brace '{'		Loc=<17_12_05.c:22:5 <Spelling=/usr/include/assert.h:108:51>>
if 'if'	 [LeadingSpace]	Loc=<17_12_05.c:22:5 <Spelling=/usr/include/assert.h:109:7>>
l_paren '('	 [LeadingSpace]	Loc=<17_12_05.c:22:5 <Spelling=/usr/include/assert.h:109:10>>
identifier 'findMin'		Loc=<17_12_05.c:22:5 <Spelling=17_12_05.c:22:12>>
l_paren '('		Loc=<17_12_05.c:22:5 <Spelling=17_12_05.c:22:19>>
identifier 'nums'		Loc=<17_12_05.c:22:5 <Spelling=17_12_05.c:22:20>>
comma ','		Loc=<17_12_05.c:22:5 <Spelling=17_12_05.c:22:24>>
sizeof 'sizeof'	 [LeadingSpace]	Loc=<17_12_05.c:22:5 <Spelling=17_12_05.c:22:26>>
l_paren '('		Loc=<17_12_05.c:22:5 <Spelling=17_12_05.c:22:32>>
identifier 'nums'		Loc=<17_12_05.c:22:5 <Spelling=17_12_05.c:22:33>>
r_paren ')'		Loc=<17_12_05.c:22:5 <Spelling=17_12_05.c:22:37>>
slash '/'	 [LeadingSpace]	Loc=<17_12_05.c:22:5 <Spelling=17_12_05.c:22:39>>
sizeof 'sizeof'	 [LeadingSpace]	Loc=<17_12_05.c:22:5 <Spelling=17_12_05.c:22:41>>
l_paren '('		Loc=<17_12_05.c:22:5 <Spelling=17_12_05.c:22:47>>
identifier 'nums'		Loc=<17_12_05.c:22:5 <Spelling=17_12_05.c:22:48>>
l_square '['		Loc=<17_12_05.c:22:5 <Spelling=17_12_05.c:22:52>>
numeric_constant '0'		Loc=<17_12_05.c:22:5 <Spelling=17_12_05.c:22:53>>
r_square ']'		Loc=<17_12_05.c:22:5 <Spelling=17_12_05.c:22:54>>
r_paren ')'		Loc=<17_12_05.c:22:5 <Spelling=17_12_05.c:22:55>>
r_paren ')'		Loc=<17_12_05.c:22:5 <Spelling=17_12_05.c:22:56>>
equalequal '=='	 [LeadingSpace]	Loc=<17_12_05.c:22:5 <Spelling=17_12_05.c:22:58>>
numeric_constant '1'	 [LeadingSpace]	Loc=<17_12_05.c:22:5 <Spelling=17_12_05.c:22:61>>
r_paren ')'		Loc=<17_12_05.c:22:5 <Spelling=/usr/include/assert.h:109:15>>
semi ';'	 [LeadingSpace]	Loc=<17_12_05.c:22:5 <Spelling=/usr/include/assert.h:110:9>>
else 'else'	 [LeadingSpace]	Loc=<17_12_05.c:22:5 <Spelling=/usr/include/assert.h:111:7>>
identifier '__assert_fail'	 [LeadingSpace]	Loc=<17_12_05.c:22:5 <Spelling=/usr/include/assert.h:112:9>>
l_paren '('	 [LeadingSpace]	Loc=<17_12_05.c:22:5 <Spelling=/usr/include/assert.h:112:23>>
string_literal '"findMin(nums, sizeof(nums) / sizeof(nums[0])) == 1"'		Loc=<17_12_05.c:22:5 <Spelling=<scratch space>:28:1>>
comma ','		Loc=<17_12_05.c:22:5 <Spelling=/usr/include/assert.h:112:29>>
string_literal '"17_12_05.c"'	 [LeadingSpace]	Loc=<17_12_05.c:22:5 <Spelling=<scratch space>:29:1>>
comma ','		Loc=<17_12_05.c:22:5 <Spelling=/usr/include/assert.h:112:39>>
numeric_constant '22'	 [LeadingSpace]	Loc=<17_12_05.c:22:5 <Spelling=<scratch space>:30:1>>
comma ','		Loc=<17_12_05.c:22:5 <Spelling=/usr/include/assert.h:112:49>>
__extension__ '__extension__'	 [LeadingSpace]	Loc=<17_12_05.c:22:5 <Spelling=/usr/include/assert.h:129:30>>
__PRETTY_FUNCTION__ '__PRETTY_FUNCTION__'	 [LeadingSpace]	Loc=<17_12_05.c:22:5 <Spelling=/usr/include/assert.h:129:44>>
r_paren ')'		Loc=<17_12_05.c:22:5 <Spelling=/usr/include/assert.h:112:68>>
semi ';'		Loc=<17_12_05.c:22:5 <Spelling=/usr/include/assert.h:112:69>>
r_brace '}'	 [LeadingSpace]	Loc=<17_12_05.c:22:5 <Spelling=/usr/include/assert.h:113:5>>
r_paren ')'		Loc=<17_12_05.c:22:5 <Spelling=/usr/include/assert.h:113:6>>
r_paren ')'		Loc=<17_12_05.c:22:5 <Spelling=/usr/include/assert.h:113:7>>
semi ';'		Loc=<17_12_05.c:22:63>
identifier 'printf'	 [StartOfLine] [LeadingSpace]	Loc=<17_12_05.c:23:5>
l_paren '('		Loc=<17_12_05.c:23:11>
unknown '“'		Loc=<17_12_05.c:23:12>
identifier 'all'		Loc=<17_12_05.c:23:15>
identifier 'tests'	 [LeadingSpace]	Loc=<17_12_05.c:23:19>
identifier 'passed'	 [LeadingSpace]	Loc=<17_12_05.c:23:25>
exclaim '!'		Loc=<17_12_05.c:23:31>
unknown '\'		Loc=<17_12_05.c:23:32>
identifier 'n'		Loc=<17_12_05.c:23:33>
unknown '”'		Loc=<17_12_05.c:23:34>
r_paren ')'		Loc=<17_12_05.c:23:37>
semi ';'		Loc=<17_12_05.c:23:38>
return 'return'	 [StartOfLine] [LeadingSpace]	Loc=<17_12_05.c:24:5>
numeric_constant '0'	 [LeadingSpace]	Loc=<17_12_05.c:24:12>
semi ';'		Loc=<17_12_05.c:24:13>
r_brace '}'	 [StartOfLine]	Loc=<17_12_05.c:25:1>
eof ''		Loc=<17_12_05.c:25:2>
